@page
@model ProjectsModel
@{
    ViewData["Title"] = "Projects";
    ViewData["Personal"] = "Personal Projects";
    ViewData["School"] = "School Projects";
    ViewData["All"] = "All Projects";
}
<h1 style="font-size: 5rem; text-align: center; color: white">@ViewData["Title"]</h1>

<div id="Personal" class="page-container border-top">
    <h2 style="padding-top: 1rem; font-size: 3rem; text-align: center; color: white">
        <a style="text-decoration: underline;">@ViewData["Personal"]</a>
    </h2>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Vomigrams | Summer 2020</p>
            </div>
            <div class="project-row">
                <div class="project-column"><img class="project-image" src="images/vomigrams.png" /></div>
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        Vomigrams is a game that I helped to develop along with Kendall Zhu, Derek Lin, and William Fu.<br />
                        The game is a fun word game where the player is told a bunch of words and has to make new words out of them
                        before they fall off their line of thinking (the side). To win, the player must form words and break up the words
                        they are given so that they can fall through all of the cogs in their head. <br />
                        This game was made using C#, Unity, and Visual Studio.
                    </div>
                    <div class="project-button-box">Buttons for P1</div>
                </div>
            </div>
        </div>
    </div>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Flappy Grad | Summer 2020</p>
            </div>
            <div class="project-row">
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        Flappy Grad is a game that I made as a submission for the WWDC 2020 Student Challenge. <br />
                        This project is a variation of FlappyBird where you solve math problems in addition to jumping through pipes. My
                        inspiration came from my remote classes / interaction hosted on Zoom. There is a boredom, laziness, and
                        disappointment with not being able to learn as easily or hangout with my friends. As such, I thought I'd project
                        this situation onto the protagonist flapping bird. To earn his degree, he must get as many Zoom credits as possible.<br />
                        This game was made using Swift and Swift Playgrounds.
                    </div>
                    <div class="project-button-box">Buttons for P1</div>
                </div>
                <div class="project-column"><img class="project-image" src="images/flappygrad.png" /></div>
            </div>
        </div>
    </div>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Minutes Left | Winter 2020</p>
            </div>
            <div class="project-row">
                <div class="project-column"><img class="project-image" src="images/minutesleft.png" /></div>
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        Minutes Left is a productivity watch app that I made for my own personal use.<br />
                        I like using minutes as a metric to tell myself how long something will take or how long until I should go
                        somewhere. Thus came the inspiration for this app. It tells the user how many minutes are left before his/her
                        next big event, those of which can be set in the Settings of the WatchApp.<br />
                        This app was made using Apple WatchOS, Swift, and XCode.
                    </div>
                    <div class="project-button-box">Buttons for P2</div>
                </div>
            </div>
        </div>
    </div>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Blockball | Fall 2019</p>
            </div>
            <div class="project-row">
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        Blockball is a game that I developed with Vincent Portelli and Michael Smith for a hackathon.<br />
                        The game is a first-person shooter with multiplayer, with all graphics and physics made in JavaScript.
                        The main mechanics are shooting, moving, and jumping, with jumping being the most interesting. While
                        creating the game, we decided to add an element of uniqueness where the player can jump up through any
                        surface. This made the game much more interesting and fun to play.<br />
                        This game was made using Javascript, HTML, CSS, and Visual Studio Code.
                    </div>
                    <div class="project-button-box">Buttons for P2</div>
                </div>
                <div class="project-column"><img class="project-image" src="images/blockball.png" /></div>
            </div>
        </div>
    </div>
</div>

<div id="School" class="page-container border-top">
    <h2 style="padding-top: 1rem; font-size: 3rem; text-align: center; color: white">
        <a style="text-decoration: underline;">@ViewData["School"]</a>
    </h2>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Hide and Sheep | Spring 2020 | Senior Project (EECS 398)</p>
            </div>
            <div class="project-row">
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        Hide and Sheep is a game I developed with Austin Guo, Anita Lu, Justin Shearson, Sabrina Shu, and
                        Justin Wen for our Senior Project class.<br />
                        This project was most unique because of the way that our team used Unity's libraries, specifically the
                        Entity Component System (ECS). When using ECS, objects are made up of components instead of each their own
                        classes and components are affected by systems. For example, with the sheep player and the enemy, both objects
                        will have movement, but rather than giving each a way to move, ECS allows for them to each have a movement component
                        whose movement will be processed by the movement system. This is becoming more common in large-scale games
                        because of the ability to render more objects more efficiently with this system.<br />
                        This game was made using C#, ECS, Unity, and Visual Studio.
                    </div>
                    <div class="project-button-box">Buttons for P1</div>
                </div>
                <div class="project-column"><img class="project-image" src="images/hideandsheep.png" /></div>
            </div>
        </div>
    </div>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Spotify Playlist Analyzer | Spring 2020 | Systems Programming (EECS 397)</p>
            </div>
            <div class="project-row">
                <div class="project-column"><img class="project-image" src="images/spotifyanalyzer.png" /></div>
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        The Spotify Playlist Analyzer is a tool for entertainment that I developed with Francis O'Brien,
                        Chuck Rakaczky, and Justin Shearson for our Systems Programming course.<br />
                        This tool allows for users to enter the ID of any of their Spotify playlists and get a list of average characteristic
                        values for all of the songs in the playlist, including but not limited to liveness, energy, acousticness, etc. This was
                        a cool project because we learned how to use Awk to make calls to Spotify's API and process information gained from it.<br />
                        This tool was made using Awk, HTML, CSS, and Visual Studio Code.
                    </div>
                    <div class="project-button-box">Buttons for P2</div>
                </div>
            </div>
        </div>
    </div>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Realm Tracker | Spring 2020 | Systems Programming (EECS 397)</p>
            </div>
            <div class="project-row">
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        Realm Tracker is a video game tool that I developed with Chuck Rakaczky for our Systems Programming course.<br />
                        This was a very fun project to make because I had to learn Awk and CGI files from scratch to make it and it was a
                        tool that my friends and I wanted to use while playing a game called Realm Royale. The main purpose of it was to
                        scrape an existing stats tracker, but collect the stats of multiple players and display them simultaneously (which
                        the existing tracker couldn't do) so that my friends and I could compare stats directly from a certain match.<br />
                        This tool was made using Awk, HTML, CSS, and Visual Studio Code.
                    </div>
                    <div class="project-button-box">Buttons for P2</div>
                </div>
                <div class="project-column"><img class="project-image" src="images/realmtracker.png" /></div>
            </div>
        </div>
    </div>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">Vetris | Fall 2019 | Software Engineering (EECS 393)</p>
            </div>
            <div class="project-row">
                <div class="project-column"><img class="project-image" src="images/aboutme.png" /></div>
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        Vetris is a game that I developed with Justin Shearson and Michael Smith for our software engineering course. <br />
                        Vetris is a block-based game (with similar mechanics to the well-known game, Tetris) that uses voice to stack blocks
                        and clear lines. Users can play in singleplayer or multiplayer mode. Multiplayer mode allows users to send near
                        complete lines to their opponents board, making it harder for the opponent. The main unique feature of our game was the usage
                        of voice to move blocks. It changes the game in how you must predict where a piece will end up given a certain string of
                        commands.<br />
                        This game was made using Javascript, HTML, CSS, and Visual Studio Code.
                    </div>
                    <div class="project-button-box">Buttons for P2</div>
                </div>
            </div>
        </div>
    </div>
    <div class="project-box">
        <div class="project">
            <div class="project-row">
                <p class="project-title">LAMPI | Spring 2019 | Connected Devices (EECS 377)</p>
            </div>
            <div class="project-row">
                <div class="project-column">
                    <div class="project-text" style="text-align: left">
                        LAMPI is a project that I worked on throughout my Spring 2019 for a course called Connected Devices.<br />
                        LAMPI is a device created using 3D-printed pieces, a small raspberry pi, a touchscreen, and a large lamp. The
                        purpose of the course was to take advantage of all of LAMPI's features as if it was a user product, where the user
                        can change the color with the touchscreen, go online to access their LAMPI (with a full login and out-of-the-box
                        verification process), have their LAMPI interact with other LAMPI's, and connect to their LAMPI with a bluetooth
                        iPhone app. It was really fun to immerse myself in IoT and really give power to the user to do whatever they want
                        with their LAMPI. <br />
                        The projects that I did with LAMPI used a range of languages, including Python, Django, Javascript, Kivy,
                        SQL, bash, and more!
                    </div>
                    <div class="project-button-box">Buttons for P2</div>
                </div>
                <div class="project-column"><img class="project-image" src="images/lampi.png" /></div>
            </div>
        </div>
    </div>
</div>

<!--
<div id="All" class="page-container border-top">
    <h2 style="padding-top: 1rem; font-size: 3rem; text-align: center; color: white">
        <a style="text-decoration: underline;">@ViewData["All"]</a>
    </h2>
    <table class="table table-striped table-condensed" style="color: white, width:100%">
        <thead>
            <tr>
                <th><b>Project Name</b></th>
                <th><b>Project Description</b></th>
                <th><b>Languages</b></th>
                <th><b>Time Period</b></th>
                <th><b>Link</b></th>
            </tr>
        </thead>
        <tbody>
            @foreach (ProjectEntry project in @Model.projects)
            {
                <tr>
                    <th>@project.projectName</th>
                    <th>@project.description</th>
                    <th>
                    @foreach(string language in @project.languages)
                    {
                        <a>@language</a>
                    }
                    </th>
                    <th>@project.timePeriod</th>
                    <th>@project.link</th>
                </tr>
            }
        </tbody>
    </table>
</div>
-->